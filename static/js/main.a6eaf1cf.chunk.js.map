{"version":3,"sources":["components/WeatherData.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["WeatherData","props","card","description","includes","react_default","a","createElement","className","concat","city","temperature","Form","onSubmit","getWeather","type","name","placeholder","required","API_KEY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","fetch","target","elements","value","country","then","response","json","data","setState","main","temp","weather","sys","error","showWeatherData","catch","state","components_Form","src_components_WeatherData","style","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6eaf1cf.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherData.css'\n\nconst WeatherData = props => {\n\n  let card = '';\n\n  if (props.description.includes(\"clear\")) {\n    card = \"weathercardClear\";\n  } else if (props.description.includes(\"clouds\")) {\n    card = \"weathercardClouds\";\n  } else if (props.description.includes(\"rain\") || props.description.includes(\"drizzle\")) {\n    card = \"weathercardRain\";\n  } else if (props.description.includes(\"snow\")) {\n    card = \"weathercardSnow\";\n  } else if (props.description.includes(\"mist\") || props.description.includes(\"haze\")) {\n    card = \"weathercardMist\"\n  }\n\n  return (\n    <div className={`weathercard ${card}`}>\n      <h1>{props.city}</h1>\n      <h3>{props.temperature}</h3>\n      <h3>{props.description}</h3>\n    </div>\n  );\n}\n\nexport default WeatherData;","import React from 'react';\n\nconst Form = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.getWeather}>\n        <div className=\"form-group\">\n          <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\" required/>\n        </div>\n        <div className=\"form-group\">\n          <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\" required/>\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn btn-primary btn-block\">Get Weather</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherData from './components/WeatherData';\nimport Form from './components/Form';\n\n\nconst API_KEY = \"c36de55d2876618e06c7ba365992b895\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: '',\n      country: '',\n      temperature: null,\n      description: null,\n      showWeatherData: false,\n      error: false\n    }\n  }\n\n  getWeather = (e) => {\n    e.preventDefault();\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e.target.elements.city.value},${e.target.elements.country.value}&units=imperial&appid=${API_KEY}`)\n    .then(response => response.json())\n    .then(data => this.setState({ temperature: data.main.temp, description: data.weather[0].description, city: data.name, country: data.sys.country, error: false, showWeatherData: true}))\n    .catch(error => this.setState({error: true, showWeatherData: false}))\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md\">\n          </div>\n          <div className=\"col-md\">\n            <div className=\"wrapper\">\n              <h1 className=\"title\">Thunderbolt and Lightning</h1>\n              <p className=\"tagline\">a simple weather app</p>\n              <Form getWeather={this.getWeather}/>\n              {this.state.showWeatherData ? <WeatherData city={this.state.city} temperature={this.state.temperature} description={this.state.description} /> : null}\n              {this.state.error === true ? <h4 style={{textAlign: 'center'}}>No weather data found. Please enter another location.</h4> : null}\n            </div>\n          </div>\n          <div className=\"col-md\">\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}